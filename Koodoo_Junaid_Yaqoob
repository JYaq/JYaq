data mongodbatlas_clusters this {
  project_id = var.mongdbatlas_project_id
}

data mongodbatlas_cluster this {
  for_each = toset(data.mongodbatlas_clusters.this.results[*].name)

  project_id = var.mongdbatlas_project_id
  name       = each.value
}

  connection_strings = {
    for svc in var.service_configuration :
    # your code magic here to construct the correct connection string based on the following convention mongodb+srv://[username]:[password]@[cluster]/[db]/[collection]
  
	resource "mongodbatlas_cluster" "serviceName" {
	project_id   = "var.mongdbatlas_project_id"
	name         = "serviceName"
    }
	
	resource "random_password" "password" {
	  length           = 16
	  special          = true
	  override_special = "_%@"
	}

	resource "mongodbatlas_cluster" "mongoCluster" {
		project_id   = "var.mongdbatlas_project_id"
		cluster_name = "mongoCluster"
		}

	resource "mongodbatlas_cluster" "mongoDatabase" {
		project_id   = "var.mongdbatlas_project_id"
		database_name = "mongoDatabase"
		}
	
	resource "mongodbatlas_cluster" "mongoCollection" {
		project_id   = "var.mongdbatlas_project_id"
		collection_name	= "mongoCollection"
	}
}
  
  }
}

resource random_password store-service-password {
  # Generate a unique new password for the DB user
}

resource mongodbatlas_database_user store-service-user {
  # create a username for the service (e.g. the service name)
  username           = "${var.environment}-${each.key}" 
  # create a password for the service 
  password           = random_password.store-service-password
  # Create the right role (read only permissions) for this user and service
  dynamic roles {
    for_each = each.value.mongoCollection[*]
    content {
      role_name       = "read"
      database_name   = each.value.mongoDatabase
      collection_name = roles.value
    }
  }
}
